install_github('johnathanlo/micRocounter')
library(devtools)
install_github('johnathanlo/micRocounter')
library(micRocounter)
?micRocounter::FindXmers()
x <- ReadFasta(system.file("example.fsa", package = "micRocounter"), c(6,4,3,3,3), c(1,1,1,1,1))
x
FindXmers(mon_len = 2, micro_list = x)
x <- ReadFasta2(system.file("example.fsa", package = "micRocounter"),xmer = 2,minrep = 6,tolfac = 1)
FindXmers2(X)
FindXmers2(x)
x
setwd("C:/PostDoc-UofM/Projects/Diaprepes/Assembly/dup-purged-assembly")
# Find dimers
Dab_dimers <- ReadFasta2(file = "diaprepes.purged.fa",xmer = 2,minrep = 6,tolfac = 1)
FindXmers2(Dab_dimers)
Dab_dimers2 <- FindXmers2(Dab_dimers)
Dab_dimers2$`Total Loci`
Dab_dimers2$`Location/Length/SequenceName`
Dab_dimers2$`Fraction of whole genome`
Dab_dimers2$`Fraction of all microsats`
# Find dimers
Dab_reps <- ReadFasta(file = "diaprepes.purged.fa",
minrepeats = C(6,4,3,3,3),
squishy = C(1,1,1,1,1))
# Find dimers
Dab_reps <- ReadFasta(file = "diaprepes.purged.fa")
Dab_ssr <- FindXmers(Dab_reps)
Dab_ssr <- FindXmers(mon_len = 2, micro_list = Dab_reps)
Dab_3mer <- FindXmers(mon_len = 3, micro_list = Dab_reps)
View(Dab_reps)
Dab_reps$`Genome Size (Mbp)`
Dab_reps$`Total Microsat Content`
Dab_reps$Sixmers
Dab_3mer
rm
rm(Dab_3mer)
rm(Dab_ssr)
hist(Dab_reps$Twomers$Lengths)
hist(Dab_reps$Twomers$Sequence)
Dab_reps$Twomers$Sequence
Dab_reps$Twomers$Lengths
max(Dab_reps$Twomers$Lengths)
hist(Dab_reps$Twomers$Lengths,breaks = 10)
hist(Dab_reps$Twomers$Lengths,breaks = 100)
hist(Dab_reps$Twomers$Lengths,breaks = 1000)
hist(Dab_reps$Twomers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Twomers$Lengths,breaks = 100,xlim = c(0,100))
hist(Dab_reps$Twomers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Threemers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Threemers$Lengths,breaks = 1000,xlim = c(0,10))
0
hist(Dab_reps$Threemers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Fourmers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Fivemers$Lengths,breaks = 1000,xlim = c(0,100))
hist(Dab_reps$Sixmers$Lengths,breaks = 1000,xlim = c(0,100))
max(Dab_reps$Sixmers$Lengths)
Dab_reps$Sixmers$Lengths
table(Dab_reps$Sixmers$Lengths)
hist(Dab_reps$Sixmers$Lengths,breaks = 1200,xlim = c(0,100))
hist(Dab_reps$Sixmers$Lengths,breaks = 1200,xlim = c(0,10))
save.image("C:/PostDoc-UofM/Projects/Diaprepes/Assembly/dup-purged-assembly/mirosat-count.RData")
read.delim("diaprepes.purged.fa.fai")
read.delim("diaprepes.purged.fa.fai", header = F)
fa.stats <- read.delim("diaprepes.purged.fa.fai", header = F)
# read fasta index
faidx <- read.delim("diaprepes.purged.fa.fai", header = F)
faidx$V1
faidx$V2
sort(faidx$V2)
order(faidx$V2,decreasing = T)
faidx[order(faidx$V2,decreasing = T),]
faidx[,c(1,2)][order(faidx$V2,decreasing = T),]
faidx <- faidx[,c(1,2)][order(faidx$V2,decreasing = T),]
# lable columns
colnames(faidx) <- c("contig","length")
plot(faidx$length)
sum(faidx$length)
cumsum(faidx$length)
plot(cumsum(faidx$length))
faidx$length / sum(faidx$contig)
faidx$length
sum(faidx$contig)
faidx$length / sum(faidx$length)
(faidx$length / sum(faidx$length)) * 100
cumsum((faidx$length / sum(faidx$length)) * 100)
plot(faidx$length, type = "s")
plot(cumsum((faidx$length / sum(faidx$length)) * 100), type = "s")
plot(x = cumsum((faidx$length / sum(faidx$length)) * 100),
y = faidx$length, type = "s")
plot(x = cumsum((faidx$length / sum(faidx$length)) * 100),
y = faidx$length, type = "s",
xlab = "Cumilative percentage",
ylab = "Contig length")
plot(x = cumsum((faidx$length / sum(faidx$length)) * 100),
y = faidx$length / 1000000, type = "s",
xlab = "Cumilative percentage",
ylab = "Contig length")
plot(x = cumsum((faidx$length / sum(faidx$length)) * 100),
y = faidx$length / 1000000, type = "s",
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
faidx$length[46]
faidx$length[47]
abline(v = 0)
abline(h = 0)
abline(v = 10)
abline(v = 1)
abline(v = 4)
faidx$cumsum <- cumsum((faidx$length / sum(faidx$length)) * 100)
plot(x = NA,
y = NA,
xlim = c(0,100),
ylim = c(0,62),
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
faidx$length <- faidx$length / 1000000
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}if(i > 1 & i < nrow(faidx)){
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}
if(i > 1 & i < nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i])
segments(x0 = faidx$cumsum[i],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i+1])
}
}
plot(x = NA,
y = NA,
xlim = c(0,100),
ylim = c(0,62),
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}
if(i > 1 & i < nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i])
segments(x0 = faidx$cumsum[i],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i+1])
}
if(i == nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = 100,
y1 = faidx$length[i])
}
}
abline(v = 50)
abline(v = 50, col = "red")
abline(v = 50, col = "red", lty = 2)
plot(x = NA,
y = NA,
xlim = c(0,100),
ylim = c(0,62),
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}
if(i > 1 & i < nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i])
segments(x0 = faidx$cumsum[i],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i+1])
}
if(i == nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = 100,
y1 = faidx$length[i])
}
}
abline(v = 50, col = "red", lty = 2)
text(x = 51, y = 60, "dsd")
text(x = 51, y = 60, "N50", pos = 4)
text(x = 51, y = 62, "N50", pos = 4)
text(x = 50, y = 62, "N50", pos = 4)
plot(x = NA,
y = NA,
xlim = c(0,100),
ylim = c(0,62),
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}
if(i > 1 & i < nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i])
segments(x0 = faidx$cumsum[i],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i+1])
}
if(i == nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = 100,
y1 = faidx$length[i])
}
}
# plot N50
abline(v = 50, col = "red", lty = 2)
text(x = 50, y = 62, "N50", pos = 4)
text(x = 50, y = 62, "N50 = 7.8 Mb", pos = 4)
text(x = 50, y = 62, "N50 = 7.8Mb", pos = 4)
plot(x = NA,
y = NA,
xlim = c(0,100),
ylim = c(0,62),
xlab = "Cumilative percentage",
ylab = "Contig length (Mbp)")
for(i in 1:nrow(faidx)){
if(i == 1){
segments(x0 = 0,
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[1])
segments(x0 = faidx$cumsum[1],
y0 = faidx$length[1],
x1 = faidx$cumsum[1],
y1 = faidx$length[2])
}
if(i > 1 & i < nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i])
segments(x0 = faidx$cumsum[i],
y0 = faidx$length[i],
x1 = faidx$cumsum[i],
y1 = faidx$length[i+1])
}
if(i == nrow(faidx)){
segments(x0 = faidx$cumsum[i-1],
y0 = faidx$length[i],
x1 = 100,
y1 = faidx$length[i])
}
}
# plot N50
abline(v = 50, col = "red", lty = 2)
text(x = 50, y = 62, "N50 = 7.8Mb", pos = 4)
load("C:/PostDoc-UofM/Projects/Diaprepes/Assembly/dup-purged-assembly/mirosat-count.RData")
hist(Dab_reps$Sixmers$Lengths,breaks = 1200,xlim = c(0,10))
table(Dab_reps$Sixmers$Lengths)
Dab_reps$Twomers$Loci
Dab_reps$Twomers$Lengths
Dab_reps$Twomers$Sequence
Dab_reps$Twomers$SequenceNames
unique(Dab_reps$Twomers$SequenceNames)
tabulate(Dab_reps$Twomers$SequenceNames)
table(Dab_reps$Twomers$SequenceNames)
sort(table(Dab_reps$Twomers$SequenceNames))
sort(table(Dab_reps$Twomers$SequenceNames),decreasing = T)
Dab_reps$Twomers$SequenceNames
Dab_reps$Twomers$Loci
Dab_reps$Twomers$Loci[13500]
Dab_reps$Twomers$Loci[1500]
Dab_reps$Twomers$Loci[1300]
Dab_reps$Twomers$Loci[13022]
Dab_reps$Twomers$Loci[13023]
tail(Dab_reps$Twomers$Loci)
head(Dab_reps$Twomers$Loci)
head(Dab_reps$Twomers$Sequence)
head(Dab_reps$Twomers$SequenceNames)
tail(Dab_reps$Twomers$SequenceNames)
Dab_reps$Twomers$SequenceNames[13022]
Dab_reps$Twomers$SequenceNames[13021]
Dab_reps$Twomers$SequenceNames[13023]
Dab_reps$Twomers$SequenceNames[1303]
Dab_reps$Twomers$SequenceNames == "ptg000002l_1\xf2"
sum(Dab_reps$Twomers$SequenceNames == "ptg000002l_1\xf2")
head(table(Dab_reps$Twomers$SequenceNames))
(Dab_reps$Twomers$SequenceNames
Dab_reps$Twomers$SequenceNames
Dab_reps$Twomers$SequenceNames
Dab_reps$Twomers$Loci[3531]
Dab_reps$Twomers$Loci[3532]
Dab_reps$Twomers$Loci[3533]
Dab_reps$Twomers$Loci[3534]
sum(Dab_reps$Twomers$SequenceNames == "ptg000002l_1\xf2")
Dab_reps$Twomers$Loci[3522]
Dab_reps$Twomers$Loci[3523]
Dab_reps$`Genome Size (Mbp)`
Dab_reps$`Total Microsat Content`
21221260 / 1527000000
0.01389735 * 100
# calculate the microsatellite percentage
(Dab_reps$`Total Microsat Content`/Dab_reps$`Genome Size (Mbp)`)*100
# calculate the microsatellite percentage
(Dab_reps$`Total Microsat Content`/Dab_reps$`Genome Size (Mbp)`)
# calculate the microsatellite percentage
(Dab_reps$`Total Microsat Content`/1000000)
# calculate the microsatellite percentage
(Dab_reps$`Total Microsat Content`/1000000) / Dab_reps$`Genome Size (Mbp)`
# calculate the microsatellite percentage
((Dab_reps$`Total Microsat Content`/1000000) / Dab_reps$`Genome Size (Mbp)`)*100
# calculate the microsatellite percentage
((Dab_reps$`Total Microsat Content`) / 1527008157)*100
load("mirosat-count.RData")
# calculate the microsatellite percentage
((Dab_reps$`Total Microsat Content`) / 1527008157)*100
# load library
library(micRocounter)
FindXmers(mon_len = 2,micro_list = Dab_reps)
twomer <- FindXmers(mon_len = 2,micro_list = Dab_reps)
twomer$`Total Bases`
twomer$`Location/Length/SequenceName`
twomer$`Fraction of whole genome`
twomer$`Fraction of all microsats`
twomer$`Total Loci`
sum(twomer$`Total Loci`)
threemer <- FindXmers(mon_len = 3,micro_list = Dab_reps)
fourmer <- FindXmers(mon_len = 4,micro_list = Dab_reps)
fivemer <- FindXmers(mon_len = 5,micro_list = Dab_reps)
sixmer <- FindXmers(mon_len = 6,micro_list = Dab_reps)
sum(twomer$`Total Loci`,threemer$`Total Loci`,fourmer$`Total Loci`,fivemer$`Total Loci`,sixmer$`Total Loci`)
sixmer$`Total Loci`
Dab_reps$`Total Microsat Content`
twomer$`Total Bases`
sum(twomer$`Total Bases`*2,threemer$`Total Loci`*3,fourmer$`Total Loci`*4,fivemer$`Total Loci`*5,sixmer$`Total Loci`*6)
sum(twomer$`Total Loci`*2,threemer$`Total Loci`*3,fourmer$`Total Loci`*4,fivemer$`Total Loci`*5,sixmer$`Total Loci`*6)
Dab_reps$`Total Microsat Content`
Dab_reps$`Total Microsat Content` / 2
ReadFasta2("diaprepes.purged.fa",2)
ReadFasta2("diaprepes.purged.fa",2,minrep = 6,tolfac = 0)
twomer <- ReadFasta2("diaprepes.purged.fa",2,minrep = 6,tolfac = 0)
threemer <- ReadFasta2("diaprepes.purged.fa",3,minrep = 4,tolfac = 0)
fourmer <- ReadFasta2("diaprepes.purged.fa",4,minrep = 3,tolfac = 0)
fivemer <- ReadFasta2("diaprepes.purged.fa",5,minrep = 3,tolfac = 0)
sixmer <- ReadFasta2("diaprepes.purged.fa",6,minrep = 3,tolfac = 0)
twomer$`Total Microsat Content`
threemer$`Total Microsat Content`
sum(twomer$`Total Microsat Content`, threemer$`Total Microsat Content`,fourmer$`Total Microsat Content`,fivemer$`Total Microsat Content`,sixmer$`Total Microsat Content`)
Dab_reps$`Total Microsat Content`
sum(twomer$`Total Microsat Content`,
threemer$`Total Microsat Content`,
fourmer$`Total Microsat Content`,
fivemer$`Total Microsat Content`,
sixmer$`Total Microsat Content`)
totRepcont <-  sum(twomer$`Total Microsat Content`,
threemer$`Total Microsat Content`,
fourmer$`Total Microsat Content`,
fivemer$`Total Microsat Content`,
sixmer$`Total Microsat Content`)
(totRepcont/Dab_genome_size)*100
# calculate the microsatellite percentage
Dab_genome_size <- 1527008157
(totRepcont/Dab_genome_size)*100
# save environment
save.image("mirosat-count.RData")
rm(Dab_reps)
# save environment
save.image("mirosat-count.RData")
twomer$Xmers$Loci
twomer$Xmers$Lengths
twomer$Xmers$Sequence
twomer$Xmers$SequenceNames
twomer$`Genome Size (Mbp)`
(totRepcont/Dab_genome_size)*100
twomer$`Total Microsat Content` / Dab_genome_size
(twomer$`Total Microsat Content` / Dab_genome_size) * 100
(threemer$`Total Microsat Content` / Dab_genome_size) * 100
(fourmer$`Total Microsat Content` / Dab_genome_size) * 100
(fivemer$`Total Microsat Content` / Dab_genome_size) * 100
(sixmer$`Total Microsat Content` / Dab_genome_size) * 100
